{"version":3,"file":"jsNodes_data_initBackend_v0_2_0_initBackend_ts.js","sources":["./jsNodes/data/initBackend/v0.2.0/initBackend.ts","./libs/kuzzle/v.0.1.0/init.ts"],"sourcesContent":["import { NodeInstance } from \"@noodl/noodl-sdk\"\nimport init from \"../../../../libs/kuzzle/v.0.1.0/init\"\n\nconst Cookies = window.Cookies\nconst Ms = window.Ms\n\nexport default async function initBackend_v0_2_0(noodleNode: NodeInstance) {\n    const { sessionTimeout, project, envVersion, debug } = window.Rolder\n    const validateJWT = (sessionTimeout: string) => {\n        const jwtExpireDiff: number = Cookies.get('jwtExpiresAt') - Date.now()\n        if (jwtExpireDiff > 0) {\n            const jwt = Cookies.get('jwt')\n            Kuzzle.connect().then(() =>\n                Kuzzle.auth.checkToken(jwt).then((response: any) => {\n                    if (response.valid) {\n                        // restore jwt\n                        Kuzzle.jwt = jwt\n                        noodleNode.sendSignalOnOutput('jwtValidationSucceed')\n                        // update jwts\n                        Kuzzle.auth.refreshToken({ sessionTimeout }).then((response: any) => {\n                            Cookies.set('jwt', response.jwt, { expires: 30 })\n                            Cookies.set('jwtExpiresAt', Date.now() + Ms(sessionTimeout), { expires: 30 })\n                        })\n                    } else noodleNode.sendSignalOnOutput('jwtValidationFailed')\n                })\n            )\n        } else noodleNode.sendSignalOnOutput('jwtValidationFailed')\n    }\n\n    if (debug > 1) console.time('Initialize performance')\n    const Kuzzle = init({ project, envVersion })\n    Kuzzle.connect().then(() => {\n        window.Kuzzle = Kuzzle\n        validateJWT(sessionTimeout)\n        if (debug > 0) console.log('Kuzzle initialized: ' + project + '-' + envVersion)\n        if (debug > 1) console.timeEnd('Initialize performance')\n    }).catch((error: any) => {\n        console.error(error.message)\n    })\n}","import { Kuzzle, WebSocket } from 'kuzzle-sdk'\n\nexport default function init(props: { project: string, envVersion: string }): Kuzzle {\n    return new Kuzzle(\n        new WebSocket(`${props.project}.kuzzle.${props.envVersion}.rolder.app`, { port: 443 })\n    )\n}"],"names":["initBackend_v0_2_0","Cookies","window","Ms","noodleNode","sessionTimeout","project","envVersion","debug","Rolder","validateJWT","jwtExpireDiff","get","Date","now","jwt","Kuzzle","connect","then","auth","checkToken","response","valid","sendSignalOnOutput","refreshToken","set","expires","console","time","log","timeEnd","catch","error","message","init","props","WebSocket","port"],"mappings":"qOAMA,W,oCAA8BA,C,4BAH9B,IAAMC,EAAUC,OAAOD,QACjBE,EAAKD,OAAOC,GAEH,eAAeH,EAAmBI,CAAwB,EACrE,GAAM,CAAEC,eAAAA,CAAc,CAAEC,QAAAA,CAAO,CAAEC,WAAAA,CAAU,CAAEC,MAAAA,CAAK,CAAE,CAAGN,OAAOO,OACxDC,EAAc,AAACL,IACjB,IAAMM,EAAwBV,EAAQW,IAAI,gBAAkBC,KAAKC,MACjE,GAAIH,EAAgB,EAAG,CACnB,IAAMI,EAAMd,EAAQW,IAAI,OACxBI,EAAOC,UAAUC,KAAK,IAClBF,EAAOG,KAAKC,WAAWL,GAAKG,KAAK,AAACG,IAC1BA,EAASC,OAETN,EAAOD,IAAMA,EACbX,EAAWmB,mBAAmB,wBAE9BP,EAAOG,KAAKK,aAAa,CAAEnB,eAAAA,CAAe,GAAGa,KAAK,AAACG,IAC/CpB,EAAQwB,IAAI,MAAOJ,EAASN,IAAK,CAAEW,QAAS,EAAG,GAC/CzB,EAAQwB,IAAI,eAAgBZ,KAAKC,MAAQX,EAAGE,GAAiB,CAAEqB,QAAS,EAAG,EAC/E,IACGtB,EAAWmB,mBAAmB,sBACzC,GAER,MAAOnB,EAAWmB,mBAAmB,sBACzC,EAEIf,EAAQ,GAAGmB,QAAQC,KAAK,0BAC5B,IAAMZ,EAAS,cAAK,CAAEV,QAAAA,EAASC,WAAAA,CAAW,GAC1CS,EAAOC,UAAUC,KAAK,KAClBhB,OAAOc,OAASA,EAChBN,EAAYL,GACRG,EAAQ,GAAGmB,QAAQE,IAAI,uBAAyBvB,EAAU,IAAMC,GAChEC,EAAQ,GAAGmB,QAAQG,QAAQ,yBACnC,GAAGC,MAAM,AAACC,IACNL,QAAQK,MAAMA,EAAMC,QACxB,EACJ,C,+GCrCA,W,oCAAwBC,C,qBAAT,SAASA,EAAKC,CAA8C,EACvE,OAAO,IAAI,EAAAnB,OACP,IAAI,EAAAoB,UAAU,CAAC,EAAED,EAAM7B,QAAQ,QAAQ,EAAE6B,EAAM5B,WAAW,WAAW,CAAC,CAAE,CAAE8B,KAAM,GAAI,GAE5F,C"}