{"version":3,"file":"nodes_data_uploadFiles_uploadWebCamShots_v0_1_0_js.js","sources":["./nodes/data/uploadFiles/uploadWebCamShots_v0.1.0.js"],"sourcesContent":["import { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\"\n\nfunction dataURLtoFile(dataurl, filename) {\n    var arr = dataurl.split(','),\n        mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]),\n        n = bstr.length,\n        u8arr = new Uint8Array(n);\n\n    while (n--) {\n        u8arr[n] = bstr.charCodeAt(n);\n    }\n    return new File([u8arr], filename, { type: mime });\n}\n\nexport default async function node(noodleNode) {\n    const { envVersion, project, debug } = Rolder\n    const filesData = noodleNode.inputs.filesData.map(f => f.data)\n    const folder = noodleNode.inputs.folder\n    noodleNode.setOutputs({ isUploading: true })\n    if (debug > 0) console.time('upload Webcam shots time')\n\n    const credentials = {\n        region: 'ru-central1',\n        endpoint: 'https://storage.yandexcloud.net/' + envVersion + '/' + folder,\n        credentials: {\n            accessKeyId: 'YCAJES4b5ZqT9Mp_Hc5_o3NdR',\n            secretAccessKey: 'YCMkuACnCQfcvpZiGGAOUFsxnBC7PmZ8CKP0pA8Y'\n        }\n    }\n    const s3 = new S3Client(credentials)\n\n    function upload(fd) {\n        const fileBinary = dataURLtoFile(fd.data, fd.name)\n        const params = {\n            Bucket: 'rolder-' + project,\n            Key: fd.name,\n            Body: fileBinary,\n            ContentType: fd.contentType\n        }\n        const command = new PutObjectCommand(params)\n        return s3.send(command)\n    }\n\n    Promise.all(filesData.map(fd => upload(fd))).then(() => {\n        noodleNode.setOutputs({\n            isUploading: false,\n            uploadedUrls: filesData.map(fd => 'https://storage.yandexcloud.net/rolder-' + project + '/' + envVersion + '/' + folder + '/' + fd.name)\n        })\n        noodleNode.sendSignalOnOutput('sendUploaded')\n        if (debug > 0) console.timeEnd('upload Webcam shots time')\n    })\n}"],"names":["node","noodleNode","envVersion","project","debug","Rolder","filesData","inputs","map","f","data","folder","setOutputs","isUploading","console","time","s3","S3Client","region","endpoint","credentials","accessKeyId","secretAccessKey","Promise","all","fd","upload","fileBinary","dataURLtoFile","dataurl","filename","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","File","type","name","params","Bucket","Key","Body","ContentType","contentType","command","PutObjectCommand","send","then","uploadedUrls","sendSignalOnOutput","timeEnd"],"mappings":"uOAeA,W,oCAA8BA,C,sBAAf,eAAeA,EAAKC,CAAU,EACzC,GAAM,CAAEC,WAAAA,CAAU,CAAEC,QAAAA,CAAO,CAAEC,MAAAA,CAAK,CAAE,CAAGC,OACjCC,EAAYL,EAAWM,OAAOD,UAAUE,IAAI,AAAAC,GAAKA,EAAEC,MACnDC,EAASV,EAAWM,OAAOI,OACjCV,EAAWW,WAAW,CAAEC,YAAa,EAAK,GACtCT,EAAQ,GAAGU,QAAQC,KAAK,4BAU5B,IAAMC,EAAK,IAAI,EAAAC,SARK,CAChBC,OAAQ,cACRC,SAAU,mCAAqCjB,EAAa,IAAMS,EAClES,YAAa,CACTC,YAAa,4BACbC,gBAAiB,0CACrB,CACJ,GAeAC,QAAQC,IAAIlB,EAAUE,IAAI,AAAAiB,GAAMC,AAZhC,UAAgBD,CAAE,EACd,IAAME,EAAaC,AA/B3B,SAAuBC,CAAO,CAAEC,CAAQ,EAOpC,IANA,IAAIC,EAAMF,EAAQG,MAAM,KACpBC,EAAOF,CAAG,CAAC,EAAE,CAACG,MAAM,UAAU,CAAC,EAAE,CACjCC,EAAOC,KAAKL,CAAG,CAAC,EAAE,EAClBM,EAAIF,EAAKG,OACTC,EAAQ,IAAIC,WAAWH,GAEpBA,KACHE,CAAK,CAACF,EAAE,CAAGF,EAAKM,WAAWJ,GAE/B,OAAO,IAAIK,KAAK,CAACH,EAAM,CAAET,EAAU,CAAEa,KAAMV,CAAK,EACpD,EAoByCR,EAAGf,KAAMe,EAAGmB,MACvCC,EAAS,CACXC,OAAQ,UAAY3C,EACpB4C,IAAKtB,EAAGmB,KACRI,KAAMrB,EACNsB,YAAaxB,EAAGyB,WACpB,EACMC,EAAU,IAAI,EAAAC,iBAAiBP,GACrC,OAAO7B,EAAGqC,KAAKF,EACnB,GAEuC1B,KAAM6B,KAAK,KAC9CrD,EAAWW,WAAW,CAClBC,YAAa,GACb0C,aAAcjD,EAAUE,IAAI,AAAAiB,GAAM,0CAA4CtB,EAAU,IAAMD,EAAa,IAAMS,EAAS,IAAMc,EAAGmB,KACvI,GACA3C,EAAWuD,mBAAmB,gBAC1BpD,EAAQ,GAAGU,QAAQ2C,QAAQ,2BACnC,EACJ,C"}