{"version":3,"file":"nodes_initBackend_initBackend_v0_1_0_js.js","sources":["./libs/kuzzle/v0.0.6/init.js","./nodes/initBackend/initBackend_v0.1.0.js"],"sourcesContent":["import { Kuzzle, WebSocket } from 'kuzzle-sdk'\n\nconst init = (props) => {    \n    return new Kuzzle(\n        new WebSocket(props.project + '.kuzzle.' + props.envVersion + '.rolder.app', { port: 443 })\n    )\n}\nexport default init","import init from '../../libs/kuzzle/v0.0.6/init'\nconst initBackend = async () => {\n    const { backendType, project, envVersion, debug } = Rolder\n    switch (backendType) {\n        case 'kuzzle':\n            const Kuzzle = init({ project, envVersion })\n            try {\n                await Kuzzle.connect()\n                window.Kuzzle = Kuzzle\n                if (debug > 0) console.log('Kuzzle initialized: ' + project + '-' + envVersion)\n            } catch (error) {\n                console.error(error.message)\n            }\n            break\n    }\n}\n\nexport default async function node(noodleNode) {\n    const { sessionTimeout, debug } = Rolder\n    const validateJWT = (sessionTimeout) => {\n        const jwtExpireDiff = cookies.get('jwtExpiresAt') - Date.now()\n        if (jwtExpireDiff > 0) {\n            const jwt = cookies.get('jwt')\n            Kuzzle.connect()\n            Kuzzle.auth.checkToken(jwt).then((response) => {\n                if (response.valid) {\n                    // restore jwt\n                    Kuzzle.jwt = jwt\n                    noodleNode.sendSignalOnOutput('jwtValidationSucceed')\n                    // update jwt\n                    Kuzzle.auth.refreshToken({ sessionTimeout }).then((response) => {\n                        cookies.set('jwt', response.jwt, { expires: 30 })\n                        cookies.set('jwtExpiresAt', Date.now() + ms(sessionTimeout), { expires: 30 })\n                    })\n                } else noodleNode.sendSignalOnOutput('jwtValidationFailed')\n            })\n        } else noodleNode.sendSignalOnOutput('jwtValidationFailed')\n    }\n\n    if (debug > 1) console.time('Initialize performance')\n\n    initBackend().then(() => {\n        validateJWT(sessionTimeout)\n        if (debug > 1) console.timeEnd('Initialize performance')\n    })\n}"],"names":["props","Kuzzle","WebSocket","project","envVersion","port","node","initBackend","backendType","debug","Rolder","connect","window","console","log","error","message","noodleNode","sessionTimeout","validateJWT","jwtExpireDiff","cookies","get","Date","now","jwt","auth","checkToken","then","response","valid","sendSignalOnOutput","refreshToken","set","expires","ms","time","timeEnd"],"mappings":"8NAOA,W,oCAAA,C,qBAAA,EALa,AAACA,GACH,IAAI,EAAAC,OACP,IAAI,EAAAC,UAAUF,EAAMG,QAAU,WAAaH,EAAMI,WAAa,cAAe,CAAEC,KAAM,GAAI,G,+GCajG,W,oCAA8BC,C,4BAhB9B,IAAMC,EAAc,UAChB,GAAM,CAAEC,YAAAA,CAAW,CAAEL,QAAAA,CAAO,CAAEC,WAAAA,CAAU,CAAEK,MAAAA,CAAK,CAAE,CAAGC,OACpD,GACS,WADDF,GAEA,IAAM,EAAS,cAAK,CAAEL,QAAAA,EAASC,WAAAA,CAAW,GAC1C,GAAI,CACA,MAAM,EAAOO,UACbC,OAAOX,OAAS,EACZQ,EAAQ,GAAGI,QAAQC,IAAI,uBAAyBX,EAAU,IAAMC,EACxE,CAAE,MAAOW,EAAO,CACZF,QAAQE,MAAMA,EAAMC,QACxB,EAGZ,EAEe,eAAeV,EAAKW,CAAU,EACzC,GAAM,CAAEC,eAAAA,CAAc,CAAET,MAAAA,CAAK,CAAE,CAAGC,OAC5BS,EAAc,AAACD,IACjB,IAAME,EAAgBC,QAAQC,IAAI,gBAAkBC,KAAKC,MACzD,GAAIJ,EAAgB,EAAG,CACnB,IAAMK,EAAMJ,QAAQC,IAAI,OACxBrB,OAAOU,UACPV,OAAOyB,KAAKC,WAAWF,GAAKG,KAAK,AAACC,IAC1BA,EAASC,OAET7B,OAAOwB,IAAMA,EACbR,EAAWc,mBAAmB,wBAE9B9B,OAAOyB,KAAKM,aAAa,CAAEd,eAAAA,CAAe,GAAGU,KAAK,AAACC,IAC/CR,QAAQY,IAAI,MAAOJ,EAASJ,IAAK,CAAES,QAAS,EAAG,GAC/Cb,QAAQY,IAAI,eAAgBV,KAAKC,MAAQW,GAAGjB,GAAiB,CAAEgB,QAAS,EAAG,EAC/E,IACGjB,EAAWc,mBAAmB,sBACzC,EACJ,MAAOd,EAAWc,mBAAmB,sBACzC,EAEItB,EAAQ,GAAGI,QAAQuB,KAAK,0BAE5B7B,IAAcqB,KAAK,KACfT,EAAYD,GACRT,EAAQ,GAAGI,QAAQwB,QAAQ,yBACnC,EACJ,C"}