import { enums } from "../enums";

export default [
    { name: 'backendVersion', group: 'Connection', type: 'string', displayName: 'Backend version', default: 'd2' },
    { name: 'dbName', group: 'Connection', type: 'string', displayName: 'Database name' },
    { name: 'items', group: 'Data', type: { name: 'array', allowConnectionsOnly: true }, displayName: 'Items' },
    { name: 'inputItems', group: 'Data', type: 'array', displayName: 'Items' },
    { name: 'fetchedCount', group: 'Data', type: 'number', displayName: 'Fetched count' },
    { name: 'totalCount', group: 'Data', type: 'number', displayName: 'Total count' },
    { name: 'updateItem', group: 'Data', type: 'object', displayName: 'Update item', tooltip: "Example: { dbClass: 'task', id: 'task id', body: {...} }" },
    { name: 'updatedItem', group: 'Data', type: 'object', displayName: 'Updated item' },
    { name: 'updateScheme', group: 'Data', type: { name: 'array', allowConnectionsOnly: true }, displayName: 'Update scheme' },
    { name: 'updatedData', group: 'Data', type: 'object', displayName: 'Updated data' },
    { name: 'createScheme', group: 'Data', type: { name: 'array', allowConnectionsOnly: true }, displayName: 'Create scheme' },
    { name: 'createdData', group: 'Data', type: 'object', displayName: 'Created data' },
    { name: 'updateItems', group: 'Data', type: { name: 'object', allowConnectionsOnly: true }, displayName: 'Update items', tooltip: "Example: { dbClass: 'task', items: [{id: 'id', body: {...} }] }" },
    { name: 'updatedItems', group: 'Data', type: 'array', displayName: 'Updated items' },
    { name: 'typedValue', group: 'Data', type: { name: 'string', allowConnectionsOnly: true }, displayName: 'Typed value' },
    { name: 'defaultNumberValue', group: 'Data', type: 'number', displayName: 'Default value' },
    { name: 'value', group: 'Data', type: 'string', displayName: 'Value' },
    { name: 'createValue', group: 'Data', type: 'string', displayName: 'Create value', dependsOn: [{ name: 'creatable', value: true }] },
    { name: 'selectedItem', group: 'Data', type: 'object', displayName: 'Selected item' },
    { name: 'selectedItems', group: 'Data', type: 'array', displayName: 'Selected items' },
    { name: 'defaultItem', group: 'Data', type: { name: 'object', allowConnectionsOnly: true }, displayName: 'Default item', dependsOn: [{ name: 'useForm', value: false }] },
    { name: 'defaultSegmentedControlItem', group: 'Data', type: { name: 'string', allowConnectionsOnly: true }, displayName: 'Default item', required: true, dependsOn: [{ name: 'useForm', value: false }] },
    { name: 'selectedDate', group: 'Data', type: '*', displayName: 'Selected date' },
    { name: 'selectedDates', group: 'Data', type: 'array', displayName: 'Selected dates' },
    { name: 'defaultDate', group: 'Data', type: { name: '*', allowConnectionsOnly: true }, displayName: 'Default date' },
    { name: 'defaultItems', group: 'Data', type: 'array', displayName: 'Default items' },
    { name: 'dataSource', group: 'Data', type: { name: 'enum', enums: enums.dataSources }, displayName: 'Data source', default: 'item' },
    { name: 'dataSource2', group: 'Data', type: { name: 'enum', enums: enums.dataSources2 }, displayName: 'Data source', default: 'item' },
    { name: 'sourceField2', group: 'Data', type: 'string', displayName: 'Field', dependsOn: [{ name: 'dataSource2', value: 'item' }] },
    { name: 'sourceField2', group: 'Data', type: 'string', displayName: 'Field', dependsOn: [{ name: 'dataSource2', value: 'table' }] },
    { name: 'itemSource2', group: 'Data', type: { name: '*', allowConnectionsOnly: true }, displayName: 'Item', dependsOn: [{ name: 'dataSource2', value: 'item' }] },
    { name: 'valueSource2', group: 'Data', type: 'string', displayName: 'Value', dependsOn: [{ name: 'dataSource2', value: 'value' }] },
    { name: 'itemSource', group: 'Data', type: { name: '*', allowConnectionsOnly: true }, displayName: 'Item', dependsOn: [{ name: 'dataSource', value: 'item' }] },
    { name: 'sourceField', group: 'Data', type: 'string', displayName: 'Field', dependsOn: [{ name: 'dataSource', value: 'item' }] },
    { name: 'valueSource', group: 'Data', type: 'string', displayName: 'Value', dependsOn: [{ name: 'dataSource', value: 'value' }] },
    { name: 'userIds', group: 'Data', type: 'array', displayName: 'User ids' },
    { name: 'users', group: 'Data', type: 'array', displayName: 'Users' },
    { name: 'deleteScheme', group: 'Data', type: { name: 'array', allowConnectionsOnly: true }, displayName: 'Delete scheme' },
    { name: 'sourceUrl', group: 'Data', type: 'string', displayName: 'Source URL' },
    { name: 'screenshot', group: 'Data', type: '*', displayName: 'Screenshot' },
    { name: 'qrString', group: 'Data', type: 'string', displayName: 'QR string' },
    { name: 'flowData', group: 'Data', type: '*', displayName: 'Flow data' },
    { name: 'result', group: 'Data', type: '*', displayName: 'Result' },
    { name: 'file', group: 'Data', type: '*', displayName: 'File' },
    { name: 'item', group: 'Data', type: { name: 'object', allowConnectionsOnly: true }, displayName: 'Item' },
    { name: 'ganttTasks', group: 'Data', type: { name: 'array', allowConnectionsOnly: true }, displayName: 'Tasks' },
    { name: 'ganttChangedTask', group: 'Data', type: 'object', displayName: 'Changed task' },
    { name: 'ganttChangedProject', group: 'Data', type: 'object', displayName: 'Changed project' },
    { name: 'ganttDeletedTask', group: 'Data', type: 'object', displayName: 'Deleted task' },
    { name: 'ganttSelectedTask', group: 'Data', type: 'object', displayName: 'Selected task' },
    { name: 'cellItem', group: 'Data', type: 'object', displayName: 'Cell item' },
] as const satisfies readonly NodePort[]