[{"id":1,"title":"Rolder Kit","routePath":"/rk/","lang":"","toc":[{"text":"Структура","id":"структура","depth":2,"charIndex":218},{"text":"Общее для всех компонентов","id":"общее-для-всех-компонентов","depth":2,"charIndex":921},{"text":"Обозначения","id":"обозначения","depth":2,"charIndex":1915},{"text":"Версионность","id":"версионность","depth":2,"charIndex":2371}],"domain":"","content":"#\n\nRolder kit - это \"театр машин\" или система компонентов объединенных единым\nстандартом. Технически это JS-функции и React-компоненты. Интегрирован и\nработает только с Noodl. Эфолюционно базируется на Rolder UI Kit.\n\n\nСтруктура#\n\n * Project - настройка проекта, компоненты обязательные для проекта.\n * Style - использование стилей.\n * UI - все компоненты для верстки, отображения данных, работы с формами. Все\n   то, что отрисовывает приложение. Группируются на:\n   * Элементы - мимнимальные единицы. Это кнопка, иконка, инпут, текст и т.д.\n   * Молекулы - объединяют несколько элементов. Это все компоеннты для\n     организации пространства, форма, скрол.\n   * Организмы - сложные компоненты, состоящие из набора других компонентов.\n     Таблица, AppShell, диаграма ганта, графики, PDF-генератор,\n     предзаготовленные готовые блоки (форма авторизации).\n * Data - компоненты для получения и изменения данных бекенда.\n\n\nОбщее для всех компонентов#\n\n * В параметры на уровне Noodl выводятся часто используемые настройки. Для\n   случаев, когда этого не хватает есть:\n   * Custom props - настройки, передающиеся напрямю в компоненту. Почти все\n     компоненты основаны на той или иной библиотеке. Изучив документацию, можно\n     передавать параметры напрямую.\n   * Props function - работает как Custom props, но через функцию. Когда\n     компонента получает параметры и данные, эта функция их принимает. Так можно\n     менять параметры в зависимости от других параметров или от данных.\n   * CSS Style - передается в любую компоенту и применяется, если это возможно.\n   * CSS Class - можно задать CSS Definiton в Noodl и указать название класса.\n     Компонента применит это, если возможно.\n * Контексты (Scopes). Некторые компоненты могут или должны работать в контексте\n   другой компоненты. Например таблица или форма задают контекст. Контекст\n   означает, что данные передаются на уровне Rolder Kit, а не Noodl.\n\n\nОбозначения#\n\n * Компоненты могут быть эксперементальными #experimental или планируется их\n   выводить #deprecated. Рядом с версией вставляется соответсвующий хештег.\n * Компоненты в документации могут еметь конфигуратор. Исходные значения его\n   параметров равны дефолтным значениям компоненты.\n * При наведении на параметр в Noodl отображается подсказка с внутренним\n   названием параметра. Нужны, когда применяется Custom props или Props\n   function.\n\n\nВерсионность#\n\nВсе компоненты имеют версию. Переход с версии на версию производится простой\nсменой параметра. В документации в Changelog каждой компоненты указывается\nнюансы перехода. Изменения, которые не совместимы с предыдущей версией\nпомечаются как #breakingChange","frontmatter":{},"version":""},{"id":2,"title":"App","routePath":"/rk/project/App","lang":"","toc":[{"text":"Характеристики","id":"характеристики","depth":2,"charIndex":326},{"text":"История изменений","id":"история-изменений","depth":2,"charIndex":1115},{"text":"v1.4.0 2024.01.09","id":"v140-20240109","depth":3,"charIndex":-1}],"domain":"","content":"#\n\nКорневая компонента Rolder Kit. Чем занимается:\n\n * Проставляет параметры проектв в window.R\n * Включает дебагер, если в адресной строке указано ?debug= 1 или 2.\n * Показывает загрузчик.\n * Управляет цветовой схемой проекта.\n * Проверяет изменение версии и форсирует перезагрузку страницы для обновления\n   кеша браузера.\n\n\nХарактеристики#\n\n * Сolor scheme:\n   * Light - светлая тема и дефолтное значение.\n   * Dark - темная тема.\n   * Auto - тема системы. В этом режиме управлять темой нельзя.\n * Когда не Auto, можно:\n   * Отправить сигнал Set color scheme и Color scheme (light или dark) для\n     установки темы вручную. Тема сохранится в Local storage браузера и\n     восстанавливается при загрузке.\n   * Отправить сигнал Toggle color scheme для переключения темы. Тема так же\n     сохраниться и будет восстанавливаться при загрузке.\n   * В обоих случаях на выходе срабатывает сигнал Color scheme changed и\n     меняется Color scheme на выходе.\n * Ограничение - т.к. у нас все приложения рендерятся только на клиенте, при\n   загрузке нет темы, экран белый. Когда загрузился Rolder Kit, тема\n   преключится.\n\n\nИстория изменений#\n\n\nv1.4.0 2024.01.09#\n\n#breakingChange\n\nПереходить на App v1.4.0 нужно вместе с переходом на Mantine v0.2.0\n\n * #breakingChange Управление цветовой схемой (dark, light) перехало из\n   компоненты Mantine. Нужно это для изменения фона до загрузки Mantine.\n * #breakingChange Удалены все старые версии.","frontmatter":{},"version":""},{"id":3,"title":"Mantine","routePath":"/rk/project/Mantine","lang":"","toc":[{"text":"Характеристики","id":"характеристики","depth":2,"charIndex":303},{"text":"История изменений","id":"история-изменений","depth":2,"charIndex":385},{"text":"v1.4.0 2024.01.09","id":"v140-20240109","depth":3,"charIndex":-1}],"domain":"","content":"#\n\nКорневая компонента для всех компонент, основанных на билиотеке Mantine. Чем\nзанимается:\n\n * Создает контекст для всех дочерних компонентов Mantine.\n * Создает контекст для всплывающих сообщений.\n * Устанавливает Mantine theme из настроек проекта.\n * Устанавливает локаль для компонентов календаря.\n\n\nХарактеристики#\n\n * Notifications position: расположение всплывающих сообщений.\n\n\nИстория изменений#\n\n\nv1.4.0 2024.01.09#\n\n#breakingChange\n\nПереходить на Mantine v0.2.0 нужно вместе с переходом на App v1.4.0\n\n * #breakingChange Управление цветовой схемой (dark, light) перехало в\n   компоненту App. Нужно это для изменения фона до загрузки Mantine.\n * #breakingChange Удалены все старые версии.","frontmatter":{},"version":""},{"id":4,"title":"Инструкция создания проекта в Noodl","routePath":"/rk/project/Setup","lang":"","toc":[],"domain":"","content":"#\n\n * Создать проект, используя шаблон Noodl \"Hello World\". Название проекта не\n   имеет технического значения.\n * Удалить все, кроме компоненты App. Удалить содержимое компоненты App. Noodl\n   должен ругануться на отсутсвие корневого элемента.\n * В настройках проекта установить:\n   * Head Code:\n   \n   \n   \n   * Title: заголовок для браузера.\n   * URL Path type: Hash.\n   * Body Scroll: выключить.\n   * Отключить эксперементальные настройки Noodl.\n * Открыть папку проекта, перейти в noodl_modules, удалить material-icons,\n   скопировать пакеты Rolder Kit:\n   * Обязательные: app, mantine, mantine-old, libs, utils.\n   * Не обязательные:\n     * data - для использования бекенда.\n     * pdf - просмотр и генерация PDF.\n     * gantt - построение графика Ганта.\n     * charts - построение аналитических графиков.\n * Перезайти в проект, вернутся в настройки проекта и установить в появившейся\n   группе Rolder:\n   * Project name - техническое название проекта. Должно соответсвовать названию\n     проекта в бекенде. Обязательный параметр.\n   * Project version - версия проекта. Обязательный параметр.\n   * Project defaults - дефолтные значения. Используются компонентами, в\n     компонентах описано, что нужно устанавливать. Опционально.\n   * Mantine theme - тема Mantine. Опционально.\n * Добавить компоненту RK App в App. Сделать App корневой компонентой - App в\n   навигации, три точки, Make home.\n * После Make home, App руганется, что не выбрана версия. Выбрать версию.\n * Добавить в App компонету Mantine.\n * Добавить в Mantine Data, если нужно.","frontmatter":{},"version":""},{"id":5,"title":"CSS","routePath":"/rk/style/CSS","lang":"","toc":[{"text":"Пример использования классов CSS Mantine","id":"пример-использования-классов-css-mantine","depth":2,"charIndex":387}],"domain":"","content":"#\n\nВсе наши компоненты умеют принимать оба CSS параметра Noodl:\n\n * CSS Style: просто прописываем стили в формате CSS.\n * CSS Class: проставлять класс не нужно, т.к. в Mantine все компоненты имеют\n   прописанные классы.\n\nНе рекомендовано\n\nИспользовать CSS нужно только в случаях, когда нельзя задать стили средствами\nкомпоненты. Если нужно то лучше использовать Style, т.к. он локален.\n\n\nПример использования классов CSS Mantine#\n\n * Ищем Styles API для требуемого компонента, например для Image\n * Вставляем Image.\n * Добавляем компонент Noodl CSS Definition с таким содержанием:\n\n\n\n * В результате, при отсутсвии картинки, Placeholder поменяет фон.\n * Классы работают глобально. В этом примере, все компонентв Image поймают этот\n   CSS.","frontmatter":{},"version":""},{"id":6,"title":"Mantine theme","routePath":"/rk/style/Theme","lang":"","toc":[{"text":"Характеристики","id":"характеристики","depth":2,"charIndex":372}],"domain":"","content":"#\n\nТема Mantine. Управляет дефолтными значениями компонент. Задается в Head Code, в\nR.params\n\nДокументация Mantine.\n\nЕлси в mantineTheme задан параметр, компонента для которой он задан выставит\nтакой параметр как дефолтный в панели параметров Noodl.\n\nЕлси в mantineTheme задана функция, компонента для которой он задан не будет\nиметь соответсвующего дефолтного знаяения.\n\n\nХарактеристики#\n\nПо дефотлу прописана такая тема:\n\n\n\nПример использования mantineTheme:\n\n\n\nПример использования mantineTheme c функцией:\n\n","frontmatter":{},"version":""},{"id":7,"title":"Image","routePath":"/rk/ui/elements/dataDisplay/Image","lang":"","toc":[{"text":"Конфигуратор","id":"конфигуратор","depth":2,"charIndex":373},{"text":"История изменений","id":"история-изменений","depth":2,"charIndex":389},{"text":"v0.4.0 2024.01.08","id":"v040-20240108","depth":3,"charIndex":410}],"domain":"","content":"#\n\nОтображает картинку.\n\nДефолтно занимает 100% ширины родительского контейнера, сохраняя пропорции. Пока\nне указана высота сохраняет пропорции.\n\nИспользует Placeholder, когда не указан источник или источник не возвращает\nкартинку. Размер Placeholder равен заданым размерам картинки. Размер иконки\nPlaceholder нужно подстраивать под размер картинки.\n\nДокументация Mantine\n\n\nКонфигуратор#\n\n\nИстория изменений#\n\n\nv0.4.0 2024.01.08#\n\n#breakingChange\n\n * #breakingChange Название параметра Source теперь соответсвует названию в\n   библиотеке. Больше не является обязятелным.\n * #breakingChange Убран параметр Max width.\n * Добавлены параметры ширины и высоты.\n * Добавлен Placeholder, включен по дефолту.\n * #breakingChange Удалены версии 0.1.0 и 0.2.0","frontmatter":{},"version":""}]