import { JsNodeProps, RNodeProps } from "../../../types/custom-types"
import { EGroup, enums, units } from "./utils"

const reactProps: RNodeProps = {
    dbClasses: { displayName: 'Database classes', type: 'array', group: EGroup.general },
    notificationsPosition: { group: 'Notifications', displayName: 'Notifications position', type: { name: 'enum', enums: enums.notificationsPositions }, default: 'bottom-right' },
    detectColorScheme: { type: 'boolean', displayName: 'Autodetect color scheme', group: 'Theme' },
    colorScheme: { type: { name: 'enum', enums: enums.colorSchemes }, displayName: 'Default color scheme', group: 'Theme' },
    sx: { type: 'array', displayName: 'Custom sx', group: 'Advanced Style', tooltip: "Example: [{ width: 100 }]" },
    // general
    disabled: { type: 'boolean', displayName: 'Disabled', group: EGroup.general },
    // dimensions
    size: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Size', group: EGroup.dimensions },
    sizeUnits: { type: { name: 'number', units, defaultUnit: 'rem' }, displayName: 'Size', group: EGroup.dimensions },
    sizeString: { type: 'string', displayName: 'Size', group: EGroup.dimensions },
    iconSize: { type: { name: 'number', units, defaultUnit: 'rem' }, displayName: 'Icon size', group: EGroup.dimensions },
    h: { type: { name: 'number', units, defaultUnit: 'rem' }, displayName: 'Height', group: EGroup.dimensions },
    heightString: { type: 'string', displayName: 'Height (string)', group: EGroup.dimensions },
    minHeight: { type: { name: 'number', units, defaultUnit: 'rem' }, displayName: 'Min height', group: EGroup.dimensions },
    w: { type: { name: 'number', units, defaultUnit: 'rem' }, displayName: 'Width', group: EGroup.dimensions },
    widthString: { type: 'string', displayName: 'Width (string)', group: EGroup.dimensions },
    radius: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Radius', group: EGroup.dimensions },
    gutter: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Gutter', group: EGroup.dimensions },
    // font
    fz: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Size', group: EGroup.font },
    fw: { type: { name: 'enum', enums: enums.fontWeights }, displayName: 'Weight', group: EGroup.font },
    // layout
    m: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Margin', group: EGroup.layout },
    mt: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Margin top', group: EGroup.layout },
    mr: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Margin right', group: EGroup.layout },
    mb: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Margin bottom', group: EGroup.layout },
    ml: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Margin left', group: EGroup.layout },
    p: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Padding', group: EGroup.layout },
    pt: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Padding top', group: EGroup.layout },
    pr: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Padding right', group: EGroup.layout },
    pb: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Padding bottom', group: EGroup.layout },
    pl: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Padding left', group: EGroup.layout },
    direction: { type: { name: 'enum', enums: enums.directions }, displayName: 'Direction', group: EGroup.layout, },
    wrap: { type: { name: 'enum', enums: enums.wraps }, displayName: 'Wrap', group: EGroup.layout },
    stackAlign: { type: { name: 'enum', enums: enums.stackAligns }, displayName: 'Align', group: EGroup.layout },
    flexAlign: { type: { name: 'enum', enums: enums.flexAligns }, displayName: 'Align', group: EGroup.layout },
    stackJustify: { type: { name: 'enum', enums: enums.stackJustifies }, displayName: 'Justify', group: EGroup.layout },
    flexJustify: { type: { name: 'enum', enums: enums.flexJustifies }, displayName: 'Justify', group: EGroup.layout },
    spacing: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Spacing', group: EGroup.layout },
    stackSpacing: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Spacing', group: EGroup.layout },
    gap: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Gap', group: EGroup.layout },
    bottomOffset: { type: 'number', displayName: 'Bottom offset', group: EGroup.layout, default: 0 },
    position: { type: { name: 'enum', enums: enums.positions }, displayName: 'Position', group: EGroup.layout },
    grow: { type: 'boolean', displayName: 'Grow', group: EGroup.layout },
    drawerPosition: { type: { name: 'enum', enums: enums.drawerPositions }, displayName: 'Position', group: EGroup.layout },
    spans: { type: 'array', displayName: 'Spans', group: EGroup.layout, tooltip: "Example: [4,4,4] One row = 12. Can be number, auto, content" },
    orientation: { type: 'boolean', displayName: 'Vertical', group: EGroup.layout, default: false },
    // style
    color: { type: { name: 'enum', enums: enums.colors }, displayName: 'Color', group: EGroup.style },
    buttonColor: { type: { name: 'enum', enums: enums.colors }, displayName: 'Button color', group: EGroup.style },
    loaderVariant: { type: { name: 'enum', enums: enums.loaderVariants }, displayName: 'Variant', group: EGroup.style },
    avatarVariant: { type: { name: 'enum', enums: enums.avatarVariants }, displayName: 'Variant', group: EGroup.style },
    iconName: { type: 'string', displayName: 'Icon name', group: EGroup.style, tooltip: 'Find icon at tabler-icons.io and capitalize it: "IconSuperName"' },
    stroke: { type: 'number', displayName: 'Stroke', group: EGroup.style },
    shadow: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Shadow', group: EGroup.style },
    opacity: { type: 'number', displayName: 'Opacity', group: EGroup.style },
    backgroundColor: { type: { name: 'enum', enums: enums.colors }, displayName: 'Background color (sx)', group: EGroup.style },
    colorShade: { type: { name: 'enum', enums: enums.colorShades }, displayName: 'Color shade (sx)', group: EGroup.style, default: '6' },
    actionVariant: { type: { name: 'enum', enums: enums.actionVariants }, displayName: 'Variant', group: EGroup.style },
    badgeVariant: { type: { name: 'enum', enums: enums.badgeVariants }, displayName: 'Variant', group: EGroup.style, default: 'light' },
    // data
    isLoading: { type: 'boolean', displayName: 'Loading', group: EGroup.data },
    value: { type: 'string', displayName: 'Value', group: EGroup.data },
    title: { type: 'string', displayName: 'Title', group: EGroup.data },
    label: { type: 'string', displayName: 'Label', group: EGroup.data },
    labelField: { type: 'string', displayName: 'Label field', group: EGroup.data },
    placeholder: { type: 'string', displayName: 'Placeholder', group: EGroup.data },
    message: { type: 'string', displayName: 'Message', group: EGroup.data },
    useDataType: { type: { name: 'enum', enums: enums.useDataTypes }, displayName: 'Type', group: EGroup.useData },
    useDataEnabled: { type: 'boolean', displayName: 'Enabled', group: EGroup.useData },
    className: { type: 'string', displayName: 'Classname', group: EGroup.data },
    classNames: { type: 'array', displayName: 'Classnames', group: EGroup.data, tooltip: "Example: ['product', 'supplier']" },
    setRefs: { type: 'boolean', displayName: 'Set references', group: EGroup.data, tooltip: "Fill data to reference, if exists at Noodl.Objects" },
    refMap: { type: 'array', displayName: 'Reference map', group: EGroup.data, tooltip: "Example: [{product: ['supplier', 'warehouse']}]" },
    createItem: { type: 'object', displayName: 'Create item', group: EGroup.data, tooltip: "Example: {className: 'task', body: {...}}" },
    updateItem: { type: 'object', displayName: 'Update item', group: EGroup.data, tooltip: "Example: {className: 'task', id: 'task id', body: {...}}" },
    inputString: { type: 'string', displayName: 'Input string', group: EGroup.data },
    searchString: { type: 'string', displayName: 'Search string', group: EGroup.data },
    searchFields: { type: 'array', displayName: 'Search fields', group: EGroup.data, tooltip: "Example: ['content.name.search']" },
    inputItems: { type: 'array', displayName: 'Input items', group: EGroup.data, tooltip: "Example: [{ value: 'option-1', label: 'Option 1' }]" },
    searchEnabled: { type: 'boolean', displayName: 'Search enabled', group: EGroup.data },
    foundedData: { type: 'object', displayName: 'Founded data', group: EGroup.data },
    dateFormat: { type: 'string', displayName: 'Date format', group: EGroup.data, default: 'YYYY-MM-DD HH:mm' },
    createField: { type: 'string', displayName: 'Create field', group: EGroup.data },
    createData: { type: 'object', displayName: 'Create data', group: EGroup.data, tooltip: "Example: { className: 'task', items: [{body: {...} }] }" },
    // table 
    tableData: { type: 'object', displayName: 'Table data', group: EGroup.data },
    columns: { type: 'array', displayName: 'Columns', group: 'Table' },
    fontSize: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Font size', group: EGroup.style },
    borderRadius: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Border radius', group: EGroup.style },
    verticalSpacing: { type: { name: 'enum', enums: enums.sizes }, displayName: 'Vertical spacing', group: EGroup.layout },
    withBorder: { type: 'boolean', displayName: 'Table borders', group: EGroup.style },
    withColumnBorders: { type: 'boolean', displayName: 'Column borders', group: EGroup.style },
    noHeader: { type: 'boolean', displayName: 'No header', group: 'Table' },
    selectable: { type: 'boolean', displayName: 'Selectable', group: 'Selectable' },
    selectableType: { type: { name: 'enum', enums: enums.selectableTypes }, displayName: 'Type', group: 'Selectable', default: 'singleRow' },
    highlightOnHover: { type: 'boolean', displayName: 'Hightlight row on hover', group: 'Selectable' },
    highlightSelectedRow: { type: 'boolean', displayName: 'Hightlight selected row', group: 'Selectable' },
    selectFirstItem: { type: 'boolean', displayName: 'Select first item', group: 'Selectable' },
    resetSelected: { type: 'boolean', displayName: 'Reset selected', group: 'Selectable' },
    // etable
    tableScheme: { type: 'array', displayName: 'Table scheme', group: EGroup.data },
    filterMaps: { type: 'array', displayName: 'Filter maps', group: EGroup.data },
    sendViewItem: { type: 'signal', displayName: 'View item clicked', group: EGroup.signals },
    sendEditItem: { type: 'signal', displayName: 'Edit item clicked', group: EGroup.signals },
    // appshell
    enableHeader: { type: 'boolean', displayName: 'Header', group: 'App layout' },
    enableFooter: { type: 'boolean', displayName: 'Footer', group: 'App layout' },
    enableNavbar: { type: 'boolean', displayName: 'Navbar', group: 'App layout' },
    navItems: { type: 'array', displayName: 'Navigation items', group: EGroup.navigation },
    // params
    autoClose: { type: 'number', displayName: 'Autoclose (ms)', group: EGroup.params },
    withCloseButton: { type: 'boolean', displayName: 'With close button', group: EGroup.style, default: false, tooltip: "Hides close button and title" },
    withAsterisk: { type: 'boolean', displayName: 'With asterisk', group: EGroup.params },
    query: { type: 'array', displayName: 'Query', group: EGroup.params, tooltip: "Example: [{ content.name: { 'ta-da!!!'} }]" },
    sorts: { type: 'array', displayName: 'Sorts', group: EGroup.params, tooltip: "Example: [{ content.name: 'asc' }]" },
    options: { type: 'array', displayName: 'Options', group: EGroup.params, tooltip: "Example: [{ size: 100 }]" },
    id: { type: 'string', displayName: 'Object id', group: EGroup.params },
    ids: { type: 'array', displayName: 'Objects Ids', group: EGroup.params, tooltip: "Example: ['id1', 'id2']" },
    offsetScrollbars: { type: 'boolean', displayName: 'Offset scrollbars', group: EGroup.params },
    searchable: { type: 'boolean', displayName: 'Searchable', group: EGroup.params },
    clearable: { type: 'boolean', displayName: 'Clearable', group: EGroup.params },
    creatable: { type: 'boolean', displayName: 'Creatable', group: EGroup.params },
    limitMinDate: { type: 'boolean', displayName: 'Limit minimal date', group: EGroup.params, default: false },
    daysOffset: { type: 'number', displayName: 'Minimum days offset', group: EGroup.params, default: 0, tooltip: 'Number of days to offset. Negative for past offset' },
    debounced: { type: 'boolean', displayName: 'Debounced', group: EGroup.params, default: false, tooltip: 'Delay typed string at output' },
    delay: { type: 'number', displayName: 'Delay (ms)', group: EGroup.params, default: 350 },
    buttonType: { type: { name: 'enum', enums: enums.buttonTypes }, displayName: 'Button type', group: EGroup.params, tooltip: '"Submit" to trigger form' },
    qrCodeLevel: { type: { name: 'enum', enums: enums.qrCodeLevels }, displayName: 'QR code level', group: EGroup.params, default: 'L' },
    // signals
    show: { type: 'boolean', displayName: 'Show', group: EGroup.signals },
    // form
    useForm: { type: 'boolean', displayName: 'Use form', group: EGroup.form },
    formField: { type: 'string', displayName: 'Form field', group: EGroup.form },
    formHook: { type: 'object', displayName: 'Form hook', group: EGroup.form },
    formScheme: { type: 'array', displayName: 'Form scheme', group: EGroup.data, tooltip: "Example: [{name: 'startDate', initialValue: new Date(), validate: isNotEmpty}]" },
    // uploadFiles
    filesData: { type: 'array', displayName: 'Files data', group: EGroup.data, tooltip: "Example: [{name: ..., contentType: 'image/jpeg', data: base64}]" },
    folder: { type: 'string', displayName: 'Folder', group: EGroup.data },
    // outputs
    sendInited: { type: 'signal', displayName: 'Inited', group: EGroup.data },
    jwtValidationFailed: { type: 'signal', displayName: 'JWT validation failed', group: EGroup.auth },
    jwtValidationSucceed: { type: 'signal', displayName: 'JWT validation succeed', group: EGroup.auth },
    authenticated: { type: 'signal', displayName: 'Authenticated', group: EGroup.auth },
    sendLoaded: { type: 'signal', displayName: 'Loaded', group: EGroup.data },
    sendSelected: { type: 'signal', displayName: 'Selected', group: EGroup.data },
    sendClicked: { type: 'signal', displayName: 'Clicked', group: EGroup.signals },
    selectedValue: { type: 'string', displayName: 'Selected value', group: EGroup.data },
    selectedItem: { type: 'object', displayName: 'Selected item', group: EGroup.data },
    selectedItems: { type: 'array', displayName: 'Selected items', group: EGroup.data },
    selectedPath: { type: 'string', displayName: 'Selected path', group: EGroup.navigation },
    pathChanged: { type: 'signal', displayName: 'Path changed', group: EGroup.navigation },
    isUpdating: { type: 'boolean', displayName: 'Updating', group: EGroup.data },
    sendUpdated: { type: 'signal', displayName: 'Updated', group: EGroup.data },
    isCreating: { type: 'boolean', displayName: 'Creating', group: EGroup.data },
    sendCreated: { type: 'signal', displayName: 'Created', group: EGroup.data },
    isDeleting: { type: 'boolean', displayName: 'Deleting', group: EGroup.data },
    sendDeleted: { type: 'signal', displayName: 'Deleted', group: EGroup.data },
    sendSubmited: { type: 'signal', displayName: 'Submited', group: EGroup.data },
    sendHided: { type: 'signal', displayName: 'Hided', group: EGroup.signals },
    isUploading: { type: 'boolean', displayName: 'Uploading', group: EGroup.data },
    sendUploaded: { type: 'signal', displayName: 'Uploaded', group: EGroup.signals },
    uploadedUrls: { type: 'array', displayName: 'Uploaded urls', group: EGroup.data },
    screenshot: { type: 'string', displayName: 'Screenshot', group: EGroup.data },
    sendScreenshot: { type: 'signal', displayName: 'Screenshot ready', group: EGroup.data },
    doCreate: { type: 'signal', displayName: 'Create', group: EGroup.signals },
    createValue: { type: 'string', displayName: 'Create value', group: EGroup.data },
    createdItem: { type: 'object', displayName: 'Created item', group: EGroup.data },
    doDelete: { type: 'signal', displayName: 'Delete', group: EGroup.signals },
    deleteItemId: { type: 'string', displayName: 'Delete item id', group: EGroup.data },
    createdItems: { type: 'array', displayName: 'Created items', group: EGroup.data },
    doViewImages: { type: 'signal', displayName: 'View images', group: EGroup.signals },
}

const jsProps: JsNodeProps = {
    // outputs    
    jwtValidationFailed: { type: 'signal', displayName: 'JWT validation failed', group: EGroup.auth },
    jwtValidationSucceed: { type: 'signal', displayName: 'JWT validation succeed', group: EGroup.auth },
}

export { reactProps, jsProps }